import pickle
import math
import numpy as np
import scipy.stats as sps
from sklearn.metrics import mean_squared_error, mean_absolute_error
import collections
from scipy.stats import pearsonr

def evaluate_sr(prediction, ground_truth, mask, test=False, cutoffs_valid="", cutoffs_test="", ith_round=1):
    assert ground_truth.shape == prediction.shape, 'shape mis-match'

    if test:
        num_steps = 116
    else:
        num_steps = 1244 - 116

    prediction = prediction.reshape(1026, num_steps)
    ground_truth = ground_truth.reshape(1026, num_steps)
    mask = mask.reshape(1026, num_steps)
    correlation = 0

    count = 0
    for i in range(prediction.shape[1]):
        mask_pre = prediction[:, i][np.where(mask[:, i] > 0)]
        mask_ground = ground_truth[:, i][np.where(mask[:, i] > 0)]
        if np.isnan(np.corrcoef(mask_pre, mask_ground)[0, 1]):
            count += 1
            continue
        else:
            correlation += np.corrcoef(mask_pre, mask_ground)[0, 1]
    if count > 5:
        correlation = -1234
    else:
        correlation = correlation / (prediction.shape[1] - count)
    if np.isnan(correlation):
        correlation = -1234
    # genetic_alpha_own_pred
    existing_alpha_ret = [-0.002686928483661588, -0.002129339156824561, 0.007878488275612439, -0.0001403472117990079, 0.004986423061670964, -0.0032943385922352686, 0.00013572078460866166, -0.0013795144540375004, 0.00039669857193525004, 0.00043402158136252034, 0.003185497042567098, -0.001824264384622798, 0.0010294074298979883, 0.005744926320088828, 0.0009092506382315513, 0.0019443188946131063, 0.0017380194781331237, -0.006063039574963791, -0.0005534018775105176, -0.0012743247474090724, 0.005563157936984364, -0.0010362878970668898, 0.0043741250565108025, -0.0003124555515507943, -0.003440449069501139, -0.0013517576260835273, -0.008782162748910638, 0.00430779094112177, 0.002301362438214216, -0.0013730631556445605, -7.455064879913209e-05, 0.004211635997887875, 0.0026440995239680465, -0.005424585038549923, -0.008366532884780953, 0.011453369543746872, -0.004571637393341765, 0.0006162052726381706, -0.00010624509584389319, 0.00673265107050347, -0.0019603468755066134, 0.00090572232831021, 0.0016956176320641614, -0.0011960528860186503, 0.0010493498060979434, 0.004274235952066885, -0.0015595804597801077, -0.0010613203791470793, 0.006886781410185616, -0.004170786153691153, 0.0016725261092267463, 0.0019885691109990944, 0.00012792402441097472, 0.0018257558999861256, 0.007051985153614382, -0.0027318515905525587, 0.00048506416962057486, -0.004456230412701823, 0.002216575234599727, 0.00012774155729555758, 0.0017028785598924845, -0.0005637737983773539, 0.004649564895415681, -0.0022863372131446402, 0.002979783079814391, 0.0011264681318448044, -0.004661232176752073, 0.0010768245441148405, -0.003137513343609344, -0.004240438726074602, 0.005225347279070647, 0.0006251327539299467, 0.0005283697524534059, 0.0006014210052005531, -0.001440413333230861, 0.00862724106142343, 0.002201312150166501, 0.0007156443790472533, -0.0013114234867942498, -0.0013230530270398333, 0.005060556286689222, 0.0013460449968725197, 0.0034200974120206507, 0.0020025895114978987, -0.0011618456265115595, 0.000999216393565483, -0.0028547366034301636, -0.0008184197200991061, 0.001517328466112744, -0.0002168271808711264, 0.004464960864322798, 0.0008135361466954372, -0.0026101742761627245, -0.0010591795522213454, -0.003072593626893827, -0.002650880653889298, -0.0058526984911870805, -0.00567888953963247, 0.0020288847841343216, -0.004567863815021389, -0.004199919087500281, 0.0005639539559902929, -0.0030990551192039417, -0.000132729618477323, 0.016661055544755943, 0.006365392178922624, -0.0002866746129477349, -0.004850991525145898, -0.0037609348833247402, -0.000558700193814432, 2.4675143396768462e-05, 0.0019721836567878626, 0.0012760436935754793, 0.006430752331335832, 0.003827501428431024, 0.006714069974997683]
    existing_alpha_ret_test = [0.003282821371569211,0.002631987310274253,0.000203727406409282,0.0004887027095044072,0.0026374272929656772,-0.0027713213448975482,0.0033177731728812887,0.0010049371320306477,-0.0008854599006399289,0.0025053858123165185,0.0028037666442637388,2.4243270879020784e-05,-0.0016805265682210413,0.003044911890798252,0.007871837393534253,0.0057751230612839155,0.003166609705317125,7.984494655643992e-05,-0.00019454060755674796,0.0025001009016085707,0.0022672062645756608,-0.003751268201277469,0.0053924316924296445,0.0008945115812977189,0.004381392888294533,0.004588066795548906,0.0036952403645214016,-0.0015490041989849601,0.0028815725041744233,-0.0010942433960563491,0.0002647604927743519,0.0072330801262263655,0.003882948889329274,0.0004748537873942027,0.002790704380850606,6.576401918612085e-05,-0.0002947682586348366,0.0031168886356165437,0.0037957665991217304,0.0021982811532921254,0.006258027890148954,0.004614381494193465,0.0024869742900759384,0.0007591682556000734,0.0028629877906445333,0.006188825166939083,-8.579499702543458e-05,0.0019879980858872326,0.0013614359013105481,-0.0030237303915043867,0.0008445549469349167,0.0026824577672721617,0.0037876306030175666,0.00027310157874271823,0.001138808233319022,8.510667272121353e-05,0.0017617409922519034,0.00048399533682608187,-0.00019917478390996113,0.000942884412379108,0.0017992182212276386,0.001628077077131751,0.0004929013275807304,-0.0006259501641123766,0.003468563436797245,0.008411860957481698,0.001294003882133632,0.0010589684706541203,0.0015607193188043045,0.0058456116190537255,0.000841531199664125,-0.0028362273236779423,-0.0026981036259308144,0.005089121324283186,0.000134321304153584,0.007393784041658691,0.0036980041953544873,0.006776007355567826,-0.0004300285261208403,0.0039338834193101135,0.002495234986194639,-0.0005838718679945787,0.004000888690571136,0.006267031210937857,0.010271104184777613,0.002058202336292947,0.008249482724035362,0.005439766294035309,0.0055704354117764865,0.0030840066412227696,0.0014823719385257395,0.006954010814504086,0.0030870132373586046,0.001438368726878858,0.0012298764742872947,0.00020471189303106208,-0.0017123504205638351,0.003283085821048637,0.0017548564932672317,0.0069737076507718765,0.003752395039692047,0.003585348664291388,0.0014967745960550172,0.0027841341939094377,-0.0015651642062547433,0.0008264051353374935,0.00012586283826143685,0.00149528944266053,0.002021653535087875,0.0007276194043681627,0.0018936728196023989,-0.00028920948896515863,-0.0003941593422175371,0.003187178376683697,-0.0008779504019585938,0.006054446072416786]

    # genetic_alpha_own_pred_1
    existing_alpha_ret_2 = [0.010468579863903704, 0.002695091891721235, 0.0016204254733249712, 0.0013981056975178596, -0.006212203498643487, 0.00657644870950902, 0.0023396567674205393, 0.0028301084883544103, -0.004892013794827066, 0.0012894770567621894, -0.002063559246264779, -0.0011594966642954896, 0.0008514532145253995, 0.003556121884460639, 0.001812114291401823, -0.0012736023174109157, 0.0032633594051505455, -4.9961064068404504e-05, 0.0008425796833260168, 3.5075794672101424e-05, -0.0004037605194470162, 0.0026691031400341014, -0.001332366592406542, 0.002600148021804083, -5.55563716310159e-05, 0.0022224418628169484, 0.0056788053643272995, 0.00125001100692268, -0.0016782326729376518, -0.0007620617832871934, 0.0009145421945524479, -0.0012586836425930725, 0.0036322687228431683, -0.001938410350682429, 0.0007158443934724978, 0.0008100529780359356, -0.0002232757628637394, 0.00012932936620280167, 0.0027360897604500334, -0.0016866389379756042, -0.0025322957620382835, 0.0031676452052173953, 0.0017134731789363311, 0.0019444080330597302, 0.0014961379707909561, 0.0007223892410730404, -0.002578207368611918, 0.0030915714973156483, -0.004869706559476272, -0.002779122967816572, 0.006196444810945945, -0.0007750695454147305, -0.0062047771809303764, 0.003188276562894332, 0.000425743301880388, 0.0026116872164958504, 0.0029967459425574994, 0.005619764054611398, 0.0034481236391736836, 0.0002056479559433555, 0.003561479087044628, -0.006329530130961936, -0.0011013157834703913, -5.9266534614632604e-05, 0.00021595565974230624, -0.0026431272727690525, 0.004389042071383464, 0.0016519623403379313, 0.0022630103179341887, -0.0006333022821370937, 0.004062653510761294, -0.0007935375481165075, -0.0036262738268707517, -0.0008554952265308335, 0.00011537709685338626, 0.001962222093497612, -0.006381648468235301, 0.002448464875274059, -0.005319104932250518, -0.003461439583000381, 0.006217290056997671, -0.004390209756137797, -0.008611849201571875, -0.0032973842362988837, 0.0004171085199942137, -0.002840609939102179, 0.00035432619310538094, -0.005974019341181691, -0.001762731578071719, 0.003430101598402846, 0.006803836793076279, -0.0019061953245939067, 0.002595580825153876, 0.002180596749172148, 0.0034303255361483043, 0.0032034431743346303, -0.004908667109360221, -0.0036463062875548014, 0.004360946784856656, -0.004869336643494981, 0.005184269488491822, 0.001209318669988635, 0.004544300955518166, -0.0033717251885786448, 0.004365332365872776, -0.0002432060754216092, 0.004526975175915382, -0.0017561516020986323, -0.004936296910161397, 0.002006274831487298, 0.00412301179934893, -0.003659448441605373, -0.018004673242436264, 0.0003534862382941206, 0.00017258421501864518, 0.0034257777464188344]
    existing_alpha_ret_2_test = [-0.0004159906965814919,-0.002150209385778701,-0.0009974019674814372,0.0008256390663745616,0.0036607130797121634,-0.0009469060438916932,0.002801574812728802,0.0017078595220887394,0.0012107802024481362,0.0025046147276008845,19802926083193,0.0015980775733417385,0.0012412013255551635,0.0025884293928635227,-0.00549041098559222,0.001450803921859034,0.00494404820819816,0.0004161861039801984,0.0025068527769340765,-0.0005149820419544371,0.0025593338153946377,0.0016352472517782157,0.0021899248159502616,0.0004759844286179593,-0.0025177234265565396,0.0028872598105889047,0.00036904461276887623,0.0009668111704534965,-0.0012018253749658259,-0.0035208750531539046,0.0019053661754118156,-0.0018161367881331936,0.0028117875678848048,0.003092525871370322,0.00441351343057339,-0.0014119799539917821,0.003954865664921314,0.0004070755564884454,0.0013800454769965498,-0.0006033181786974096,-0.0013835731342290991,4.377226278218238e-05,0.002470941303259089,0.0030921756290034352,-0.002049875708165727,-0.0022419149906652835,-0.00014278876150031206,0.0039074322373477965,0.0011147527139043767,-0.004546201815544437,0.003166626053651589,4.343886417079723e-05,0.0019872689923534637,0.0032950355551168986,0.0033039240171124362,0.0019438013672428145,-0.0014265469405351228,0.0018813357023368393,-0.00048046916757027436,0.0018790352938526933,-0.006034405537785337,0.0013444758401797152,0.00030002786240479473,-0.0015325570115023446,0.0015646047479054292,-0.002899909631075226,0.003622095480096066,0.004005869412256002,0.0006168349423734121,-0.009695431376363528,0.004564153008343563,5.817037179300932e-05,0.001751188214895949,-0.0006683641406953766,0.006068373986846343,0.0027269368951197137,-0.000944119736036475,-0.0071349648503673535,0.0035143512940583044,-0.002022482375129586,-0.0020763387255645638,0.00019486415486658082,0.0013357509304330328,0.0015829953640198458,-0.002456746503160856,-0.0016549023490465276,0.0013407526451345575,-0.0020114173608007935,-0.0012848259461254452,-0.0017666537411302752,-0.0004035684118263161,-0.0019670628622827646,0.0023670222979623734,-0.003204003323165172,0.006418030111743134,-0.002324878563899513,0.008102730596281305,0.0037015380879599213,0.00210613161235651,-0.0015969007794223167,0.007108224181028966,0.0010640488107891422,-0.0006010304752713802,0.009331236253266484,0.0014998836165336371,0.0013935975592120897,0.004718705884249497,0.0005957804342353601,0.0002985489167308675,0.0014040597790323517,-0.0005388247920946609,0.0033707426143096964,0.00295254758310759,0.0016915013700578019,-0.0011728332995603052,0.0010819581903322995]

    # genetic_alpha_own_pred_2
    existing_alpha_ret_3 = [0.002602882291769415, 0.0024836264875762737, -0.0026911177640164263, -0.00034178035769627524, -0.008562033050256046, -0.0013654253249306691, -0.00030372893856367433, 0.0011319096685671326, -0.00014531952150831362, 0.0012542245813227382, -0.003655087863385975, 0.0017000466528487301, 0.0022787647307964676, -0.001429585275508849, 0.0033356105774957623, -0.007203822853551922, 0.0014233633508260457, -0.002053355589366923, 0.00028590315445664594, 7.420114380174425e-05, 0.0012336884135057957, 0.00044631832789954196, 0.0013746475467621977, 0.0005360698409297981, -0.0005861202738040028, 0.001347181288366972, 0.0028125166509942456, 0.0007564579573837715, 0.0035039079565095665, 0.00018283943677399606, 0.00201517256268291, 0.0007946582735629537, 0.0006691060297134843, -0.0002383704991959501, -0.006150385626547017, 0.005666978023915581, 0.00023250179806999505, -0.0008719806771182448, -0.00024945372533946575, 0.0006702191251548584, 0.0024018224686728207, -0.0009873764163550458, 0.0003569239716079142, 0.0016351103728429184, -0.001981946074351093, -0.0029074950802213673, -0.003221061706070949, 0.001697657771419836, 0.0047388883389132275, 0.0027617500751440094, 0.00042345057752024573, -0.00043355927524557636, 0.006631087648494072, -0.002313706444575958, 0.001102159216138876, -0.00442210681401034, 0.0006749581606859678, -0.0014259784966781375, 0.0016430922989647545, 0.00027795044225187304, -0.001997501797002199, 0.002794781575677918, -0.002692879455246544, 0.0021789098815818697, -0.005006534358492409, -0.0037133842158729724, 0.0024038233267633657, 0.0001733236687504469, -0.000790426637661823, 0.005715198722229031, -1.214481989331162e-05, -0.0038919906567234097, -0.0032717846860237376, 0.0028179879318555034, -0.003814203992450138, 0.000836165214267659, -0.00048114289953959943, -3.4283955479663675e-05, -0.005361115865986865, -0.002877049217395067, -0.0043322949035282665, 0.0005605718293193451, -0.0017906955384882073, -4.111518888971766e-05, -0.0014822245394747746, -0.0022917318841699785, 0.001287599119439431, -0.00024199179200734555, -0.0021910183690726504, -0.0028690217599041112, -0.003211359208192599, -0.001380008589514592, -0.001009289191267193, -0.0002896829259636524, -0.0006050234485478478, 0.001777811002371843, -0.0029043058688204004, 0.001068795050833904, -0.0011405913125988043, 0.004379850036257293, -0.0016300419326049642, 0.00315341192706331, -0.0015924257842094836, 0.005426954158877839, 0.010000800193060044, 0.0015554832847071154, 0.0008755615339688383, 0.0005457098504868529, -0.001110705670517298, 0.0011592668069435597, 0.0025801148712270017, 0.0002722844208713493, -0.0006755158125616445, -0.0004963271330622465, -0.0012579297702741687, 0.00037142912896048763]
    existing_alpha_ret_3_test =[0.0009216736553969707, -0.0002483874978086442, 0.0011502225791795162, 0.002434479369281206, 0.0008430438675706142, -0.0014882429038134415, 8.448271453076472e-06, 0.0005932752466317748, -0.001564360420920563, -0.001098559073650196, -0.001753550315410135, -0.00044481719326339153, -0.0005443341687542125, -0.0009023356174050479, -0.005064036256869131, -0.0022777670327391863, 0.0013323854644802235, 0.0028107456312744805, -0.003376889801218197, 0.0003396718927983766, 6.665598553579066e-05, -2.1161572221983782e-05, -0.0015570590484219604, 0.003559176700965283, -0.0031300626088339722, -0.00030906334589742013, 0.0014982381235597586, -0.003475661298228294, -0.0019611134058704627, -0.002703133069248409, 0.00021563706335347987, -0.0032069347855734343, 0.001934754074660594, -0.0045911264591015355, 0.00026643974323348196, 0.001133894262607349, 0.00015693516338877167, 0.0007723391349434561, -5.116915490621654e-05, 0.00371309196845937, -0.0007661273368888555, -0.0028112872239498543, -0.0024963142080748346, -0.004649270932051475, -0.0007377737376909055, -0.0001943511044867341, -0.00010526421872880665, -0.00035599383514073324, 0.00037734866923710975, 0.0032250014560790685, -0.0023015346287366123, -0.0002669401045223285, 0.001738539919101445, -0.002007551943989161, -0.0003131935242915995, -0.005042613860076872, 0.0019456640807156145, 0.0017517480883046943, 0.002931352415601607, -0.0041005041015577115, -0.0015110960627658931, -0.003364082137756963, 0.0004510042768570699, -0.0029093540930887896, -0.0009136635029686202, -0.003071656430680525, -0.0005399365616787222, 0.003629862390504668, 0.0007168639378523078, -0.0004956937551560125, -0.003658062801746187, 0.0055445333183867795, 0.0004675089565657764, -0.003291521513468454, 0.0007582839405988473, 0.00014894355587236063, -0.0003081610669167789, 0.008368601677110954, -0.002882972212195356, 0.0028801918422944883, 0.001190023495029946, 0.00342520205093666, -0.0011487676462023089, -8.482553521715896e-05, 0.0006452698141243829, -0.002007057060226747, 0.00032220332039911703, -0.0033840550680054315, -0.001212170244999422, 0.0014400862723447094, -0.0024860093238390224, -0.0003571644547528674, -0.00011324924397015934, -0.0007730125111529151, 0.0005292777686287664, 0.0018898425005964281, 0.002938166928977415, 0.0012842021066232778, -0.0014750733309329966, 0.00041110071099770273, 0.0016420988701240091, -0.0030638803667006886, -0.0006147881157859691, -0.0004859442719641338, -0.0020415093009691354, -0.0004805354563097719, 0.0010208543357506095, 0.0015787158756770392, 0.0019267722639368934, -0.0005402697327665518, -0.00039242481511903016, -0.003038961590310252, -0.0012593912056922951, 0.0018839338710430198, 0.0006616771087142315, 0.000998935251464772]

    if ith_round > 1:
        print('cutoffs_test',cutoffs_test)
        print('cutoffs_valid',cutoffs_valid)
        
        all_valid_files=cutoffs_valid.split(';')    
        all_test_files=cutoffs_test.split(';')
        existing_alpha_returns_valid=[]
        existing_alpha_returns_test=[]
        for file in all_valid_files:
            if file:
                with open(file, 'rb') as fp:
                    cutoffs_valid = pickle.load(fp)
                    existing_alpha_returns_valid.append(cutoffs_valid)
        for file in all_test_files:
            if file:
                with open(file, 'rb') as fp:
                    cutoffs_test = pickle.load(fp)
                    existing_alpha_returns_test.append(cutoffs_test)

    performance = {}
    performance['correlation'] = correlation
    performance['mse'] = np.linalg.norm((prediction - ground_truth) * mask)**2\
        / np.sum(mask)
    mrr_top = 0.0
    all_miss_days_top = 0
    bt_long = 1.0
    bt_long5 = 1.0
    bt_long10 = 1.0

    corres = []

    stock_to_sell = []
    stock_to_exclude = []

    holding_shares = {}
    holding_shares_short = {}
    holding_days = {}
    holding_days_short = {}

    nav = 2000000.0
    old_nav = 2000000.0
    cash = 2000000.0
    init_cap = 1000000.0
    init_cap_short = 1000000.0
    old_balance = 1000000.0
    old_balance_short = 1000000.0
    new_balance = 1000000.0
    new_balance_short = 1000000.0
    dropdown_strat_ret_accu = 1.0
    lowest_dropdown_strat_ret_accu = 1.0
    holding_days_total = 0
    holding_counts = 0
    sharpe_ratio = 0

    strategy_returns = []

    for i in range(prediction.shape[1]): # for each timestep
        rank_gt = np.argsort(ground_truth[:, i])
        gt_top1 = set()
        gt_top5 = set()
        gt_top10 = set()
        for j in range(1, prediction.shape[0] + 1): # for each stock
            cur_rank = rank_gt[-1 * j] # after argsort function the last index is the largest
            if mask[cur_rank][i] < 0.5:
                continue
            if len(gt_top1) < 1:
                gt_top1.add(cur_rank) # the index of which gt return is the largest
            if len(gt_top5) < 5:
                gt_top5.add(cur_rank)
            if len(gt_top10) < 10:
                gt_top10.add(cur_rank)

        # get top 100 largest predicted stocks
        rank_pre = np.argsort(prediction[:, i])

        pre_top1 = set()
        pre_top5 = set()
        pre_top10 = set()
        pre_top50 = set()
        for j in range(1, prediction.shape[0] + 1):
            cur_rank = rank_pre[-1 * j]
            if mask[cur_rank][i] < 0.5:
                continue
            if len(pre_top1) < 1:
                pre_top1.add(cur_rank)
            if len(pre_top5) < 5:
                pre_top5.add(cur_rank)
            if len(pre_top10) < 10:
                pre_top10.add(cur_rank)
            if len(pre_top50) < 50:
                pre_top50.add(cur_rank)

        # use keys to keep track of the portfolio
        assert collections.Counter(holding_days.keys()) == collections.Counter(holding_shares.keys())

        if holding_shares.keys():
            for stock_ind in list(holding_shares): # loop over the key of the dictionary
                if stock_ind not in pre_top50:
                    holding_counts += 1
                    holding_days_total += holding_days[stock_ind]
                    holding_days.pop(stock_ind, None)
                    holding_shares.pop(stock_ind, None)

        assert collections.Counter(holding_days.keys()) == collections.Counter(holding_shares.keys())

        pre_low1 = set()
        pre_low5 = set()
        pre_low10 = set()
        pre_low50 = set()
        # get top 100 lowest predicted stocks
        for j in range(0, prediction.shape[0]):
            cur_rank = rank_pre[j]
            if mask[cur_rank][i] < 0.5:
                continue
            if len(pre_low1) < 1:
                pre_low1.add(cur_rank)
            if len(pre_low5) < 5:
                pre_low5.add(cur_rank)
            if len(pre_low10) < 10:
                pre_low10.add(cur_rank)
            if len(pre_low50) < 50:
                pre_low50.add(cur_rank)

        if holding_shares_short.keys():
            for stock_ind in list(holding_shares_short):
                if stock_ind not in pre_low50:
                    holding_counts += 1
                    holding_days_total += holding_days_short[stock_ind]
                    holding_days_short.pop(stock_ind, None)
                    holding_shares_short.pop(stock_ind, None)

        assert len(pre_top50) == 50
        for stock_ind in pre_top50:
            if stock_ind in holding_shares.keys():
                holding_shares[stock_ind] = nav / (50 * 2)
                holding_days[stock_ind] += 1
            else:
                holding_shares[stock_ind] = nav / (50 * 2)
                holding_days[stock_ind] = 1

        assert len(holding_shares) == 50
        assert len(holding_days) == 50

        for stock_ind in pre_low50:
            if stock_ind in holding_shares_short.keys():
                holding_shares_short[stock_ind] = nav / (50 * 2)
                holding_days_short[stock_ind] += 1
            else:
                holding_shares_short[stock_ind] = nav / (50 * 2)
                holding_days_short[stock_ind] = 1

        assert len(holding_shares_short) == 50
        assert len(holding_days_short) == 50

        cash += new_balance - (nav/2)
        cash -= new_balance_short - (nav/2)

        new_balance = 0
        new_balance_short = 0
        for stock_ind in holding_shares.keys():
            new_balance += holding_shares[stock_ind] * (ground_truth[stock_ind][i]+1)
        for stock_ind in holding_shares_short.keys():
            new_balance_short += holding_shares_short[stock_ind] * (ground_truth[stock_ind][i]+1)

        nav = new_balance + cash - new_balance_short

        overall_strategy_return = nav / old_nav - 1
        old_nav = nav

        strategy_returns.append(overall_strategy_return)

        old_balance = new_balance
        old_balance_short = new_balance_short

        if overall_strategy_return < 0:
            dropdown_strat_ret_accu *= (overall_strategy_return + 1)
            if lowest_dropdown_strat_ret_accu > dropdown_strat_ret_accu:
                lowest_dropdown_strat_ret_accu = dropdown_strat_ret_accu
        else:
            dropdown_strat_ret_accu = 1.0

        # calculate mrr of top1
        top1_pos_in_gt = 0
        for j in range(1, prediction.shape[0] + 1):
            cur_rank = rank_gt[-1 * j]
            if mask[cur_rank][i] < 0.5:
                continue
            else:
                top1_pos_in_gt += 1
                if cur_rank in pre_top1:
                    break
        if top1_pos_in_gt == 0:
            all_miss_days_top += 1
        else:
            mrr_top += 1.0 / top1_pos_in_gt

        # back testing on top 1
        real_ret_rat_top = ground_truth[list(pre_top1)[0]][i]
        bt_long += real_ret_rat_top
        corres.append(real_ret_rat_top)

        # back testing on top 5
        real_ret_rat_top5 = 0
        for pre in pre_top5:
            real_ret_rat_top5 += ground_truth[pre][i]
        real_ret_rat_top5 /= 5
        bt_long5 += real_ret_rat_top5

        # back testing on top 10
        real_ret_rat_top10 = 0
        for pre in pre_top10:
            real_ret_rat_top10 += ground_truth[pre][i]
        real_ret_rat_top10 /= 10
        bt_long10 += real_ret_rat_top10

    strat_ret_vol = np.std(strategy_returns)
    annual_mean_strat_ret = np.mean(strategy_returns) * 252

    if strat_ret_vol == 0 or np.abs(annual_mean_strat_ret < 0.000000001):
        sharpe_ratio = np.mean(strategy_returns) / strat_ret_vol * np.sqrt(252)
    else:
        sharpe_ratio = np.mean(strategy_returns) / strat_ret_vol * np.sqrt(252)

    if holding_counts == 0:
        average_holding_days = 0
    else:
        average_holding_days = holding_days_total / holding_counts

    if ith_round > 1:
        if test:
            performance['correlation with existing alpha'] = 0
            for i in range(ith_round-1):
                performance['correlation with existing alpha'] += np.corrcoef(strategy_returns[
                                                                             (-1 * len(existing_alpha_returns_test[i])):],
                                                                             existing_alpha_returns_test[i])[0, 1]
            performance['correlation with existing alpha'] = performance['correlation with existing alpha'] / (ith_round-1)
        else:
            performance['correlation with existing alpha'] = 0
            for i in range(ith_round-1):
                extra_len = 116 - len(existing_alpha_returns_test[i])
                actual_len_for_compare = len(existing_alpha_returns_valid[i]) - extra_len
                performance_alpha = np.corrcoef(strategy_returns[(-1 * actual_len_for_compare):], 
                    existing_alpha_returns_valid[i][:actual_len_for_compare])[0, 1]
                performance['correlation with existing alpha'] += performance_alpha
                if performance_alpha > 0.15:
                    performance['correlation'] = 0            
            performance['correlation with existing alpha'] = performance['correlation with existing alpha'] / (ith_round-1)
    else:
        performance['correlation with existing alpha'] = 0

    performance['mrrt'] = mrr_top / (prediction.shape[1] - all_miss_days_top)
    performance['btl'] = bt_long
    performance['sharpe_ratio'] = sharpe_ratio
    performance['strat_ret_vol'] = strat_ret_vol
    performance['annual_mean_strat_ret'] = annual_mean_strat_ret
    performance['lowest_dropdown_strat_ret_accu'] = 1 - lowest_dropdown_strat_ret_accu
    performance['average_holding_days'] = average_holding_days
    return performance, strategy_returns

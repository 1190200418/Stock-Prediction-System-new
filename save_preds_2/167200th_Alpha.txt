def Setup():
  v17 = gaussian(-0.423525, 0.713983, n_features)
  m21 = gaussian(0.789082, 0.0955048, (n_features, n_features))
  m2 = uniform(-0.163134, -0.161951, (n_features, n_features))
  v20 = gaussian(-0.542259, 0.480594, n_features)
  m10 = gaussian(0.347102, 0.212064, (n_features, n_features))
  s5 = uniform(0.574254, -0.755338)
  m12[0.541252, 0.12924] = 0.0756526
  m14 = gaussian(0.381862, 0.580669, (n_features, n_features))
  m14 = gaussian(0.667805, 0.118841, (n_features, n_features))
  m4[0.25698, 0.755173] = 0.63196
  m17 = uniform(-0.985479, -0.0311054, (n_features, n_features))
  m4 = uniform(-0.800573, -0.478639, (n_features, n_features))
  m5 = uniform(-0.551419, 0.897738, (n_features, n_features))
  s5 = uniform(-0.121135, -0.366522)
  v25 = uniform(0.898244, 0.106073, n_features)
  v17 = uniform(0.28907, 0.339078, n_features)
  m22[0.85397, 0.458897] = 0.123625
def Predict():
  m24 = outer(v23, v18)
  v13 = s13 * v21
  s21 = exp(s21)
  s7 = maximum(s7, s8)
  s27 = 1 / s23
  s28 = get_scalar(0.197182, 0.20938)
  m6 = 1 / m11
  v29 = get_row(0.378867)
  v8 = v12 * v29
  v27 = minimum(v10, v2)
  s19 = get_scalar(0.925094, 0.75167)
  v28 = bcast(s13)
  v29 = uniform(-0.288833, -0.245739, n_features)
  s20 = minimum(s7, s20)
  s9 = s9 + s6
  v26 = abs(v9)
  v2 = mean(m23, axis=1)
  v14 = abs(v28)
  s20 = 1 / s0
  m6 = outer(v28, v27)
  s8 = abs(s4)
  s10 = correlation(v8, v8, 0.835554)
  v6 = uniform(-0.523074, -0.421673, n_features)
  m10 = m19 + m7
  m24 = 1 / m1
  s28 = arctan(s28)
  v1 = norm(m24, axis=0)
  NoOp()
  m4 = heaviside(m7, 1.0)
  s28 = s28 - s3
  m17 = m22 * m18
  s29 = TS_rank(s15)
  s10 = maximum(s13, s6)
  m17 = outer(v13, v12)
  m1 = m13 * m24
  v26 = norm(m18, axis=1)
  s15 = s25 * s5
  s18 = cos(s13)
  s13 = get_scalar(0.0743486, 0.893172)
  s8 = log(s27)
  s7 = cos(s5)
  s22 = s0 + s1
  m1 = m17 * m8
  m9 = minimum(m2, m18)
  s7 = tan(s27)
  s1 = TS_rank(s28)
  s12 = abs(s17)
  v18 = get_row(0.1668)
  v29 = v21 / v5
  s2 = exp(s9)
  m3 = bcast(v25, axis=1)
  m15 = bcast(v2, axis=0)
  v15 = maximum(v17, v23)
  m16 = abs(m9)
  m2 = abs(m22)
  m2 = transpose(m24)
  s25 = std(m6)
  m17 = outer(v18, v25)
  s17 = relation_demean(s28)
  m13 = maximum(m13, m9)
  s6 = s16 - s0
  m3 = minimum(m7, m19)
  v26 = abs(v12)
  v17 = norm(m18, axis=1)
  s3 = s0 - s18
  m2 = heaviside(m9, 1.0)
  s3 = tan(s3)
  m7 = matmul(m20, m2)
  v15 = 1 / v28
def Learn():
  m18 = m15 / m18
  m6 = bcast(v27, axis=0)
  v3 = minimum(v20, v10)
  s4 = get_scalar(0.307404, 0.0164318)
  v8 = maximum(v1, v21)
  m13 = maximum(m20, m14)
  m5 = m12 + m9
  v17 = std(m10, axis=1)
  s18 = heaviside(s1, 1.0)
  v9 = get_column(0.652101)
  v8 = get_column(0.0761712)
  v9 = v12 * v15
  s24 = heaviside(s23, 1.0)
  m1 = maximum(m13, m17)
  m4 = 1 / m0
  s19 = arctan(s8)
  s28 = tan(s5)
  m23 = matmul(m3, m13)
  v28 = get_column(0.595552)
  s4 = maximum(s10, s24)
  s28 = 1 / s6
  v24 = bcast(s18)
  s10 = s7 - s15
  s13 = s9 * s1
  s27 = maximum(s16, s24)
  s17 = minimum(s29, s11)
  s7 = exp(s24)
  m19 = bcast(v4, axis=0)
  s9 = cos(s2)
  s27 = heaviside(s17, 1.0)
  v4 = norm(m8, axis=1)
  s11 = mean(m10)
  m5 = heaviside(m3, 1.0)
  s22 = s16 - s2
  v26 = std(m17, axis=1)
  m2 = m20 + m22
  s5 = s25 / s24
  m22 = heaviside(m1, 1.0)
 
def Setup():
  m14[0.502614, 0.963702] = 0.127336
  s24 = uniform(0.141936, 0.697568)
  s19 = gaussian(-0.814863, 0.48722)
  s5 = gaussian(-0.94736, 0.466778)
  s3 = uniform(0.108198, -0.480744)
  v4 = gaussian(0.527615, 0.355559, n_features)
  m22[0.461774, 0.333917] = 0.240436
  m2 = uniform(0.491491, 0.627244, (n_features, n_features))
  m19[0.426317, 0.743537] = -0.695344
  v29 = gaussian(-0.608092, 0.686007, n_features)
  v1 = gaussian(-0.0724787, 0.680368, n_features)
  m10 = uniform(-0.515629, -0.0311627, (n_features, n_features))
  m16 = gaussian(0.963227, 0.721968, (n_features, n_features))
  v10[0.00212232] = -0.63592
  m8 = uniform(-0.497097, 0.261217, (n_features, n_features))
def Predict():
  v16 = TS_row_rank(s10)
  s11 = get_scalar(0.590019, 0.0144912)
  NoOp()
  v5 = dot(m11, v15)
  m20 = bcast(v6, axis=1)
  v19 = mean(m11, axis=1)
  s1 = 1 / s25
  m18 = uniform(-0.208132, 0.595533, (n_features, n_features))
  m6 = abs(m15)
  s2 = correlation(v9, v4, 0.136608)
  s8 = s24 * s9
  v23 = v19 + v15
  v21 = heaviside(v4, 1.0)
  s10 = exp(s24)
  v3 = get_row(0.80723)
  s17 = norm(v21)
  v10 = heaviside(v11, 1.0)
  v11 = dot(m7, v21)
  v28 = v18 * v24
  s13 = exp(s28)
  s17 = norm(m17)
  v2 = uniform(0.14622, 0.522562, n_features)
  v18 = v4 / v29
  v23 = std(m7, axis=1)
  m11 = heaviside(m24, 1.0)
  m3 = bcast(v15, axis=0)
  s19 = TS_rank(s23)
  s3 = 1 / s14
  s20 = minimum(s4, s11)
  s17 = TS_rank(s21)
  s23 = mean(m5)
  s11 = get_scalar(0.0980294, 0.175036)
  v24 = get_column(0.549408)
  s22 = mean(v2)
  v7 = v24 * v15
  m13 = m18 - m10
  m5 = heaviside(m0, 1.0)
  v15 = std(m23, axis=1)
  v23 = get_column(0.542332)
  v12 = std(m1, axis=1)
def Learn():
  v18 = get_column(0.845027)
  v16 = get_column(0.683869)
  v6 = dot(m13, v17)
  v24 = v23 - v15
  v17 = std(m6, axis=1)
  s9 = mean(v3)
  s22 = tan(s25)
  v5 = heaviside(v16, 1.0)
  m9 = matmul(m13, m23)
  m7 = transpose(m1)
  s15 = get_scalar(0.17891, 0.961366)
  s16 = cos(s11)
  v14 = norm(m0, axis=1)
  m24 = m12 - m3
  m1 = uniform(-0.143217, -0.46086, (n_features, n_features))
  s4 = correlation(v14, v17, 0.242912)
  s25 = maximum(s13, s23)
  v13 = get_row(0.460105)
  s4 = maximum(s21, s27)
  v13 = v17 * v8
  v8 = heaviside(v10, 1.0)
  m10 = 1 / m16
  s22 = get_scalar(0.284426, 0.957253)
  m3 = transpose(m8)
  s28 = s15 - s28
  s9 = minimum(s28, s26)
  s2 = log(s24)
  m22 = maximum(m17, m24)
  s5 = exp(s18)
  v12 = bcast(s17)
  s12 = get_scalar(0.935118, 0.139077)
  v10 = dot(m5, v0)
  s4 = minimum(s7, s1)
  m9 = outer(v4, v28)
  s21 = sin(s24)
 
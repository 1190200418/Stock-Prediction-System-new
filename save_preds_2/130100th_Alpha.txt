def Setup():
  s14 = gaussian(-0.902278, 0.913233)
  s2 = uniform(-0.609018, -0.937102)
  v14 = uniform(-0.26632, 0.150575, n_features)
  s19 = -0.232478
  s12 = uniform(0.663254, 0.0371987)
  m18 = uniform(0.3622, 0.919565, (n_features, n_features))
  s27 = uniform(0.501366, -0.715268)
  s13 = -0.120421
  s10 = gaussian(0.622, 0.713787)
  v24 = gaussian(-0.185108, 0.913697, n_features)
  v8[0.908909] = 0.969287
  s11 = uniform(0.398965, -0.334245)
  s13 = 0.524463
  s8 = gaussian(0.718035, 0.350767)
  s8 = -0.0640914
  s28 = uniform(0.615537, 0.326275)
  s23 = gaussian(-0.586218, 0.560979)
  m7[0.959125, 0.283961] = 0.190956
def Predict():
  s21 = exp(s21)
  m10 = bcast(v4, axis=0)
  s28 = get_scalar(0.197182, 0.93282)
  v19 = get_column(0.367994)
  s17 = get_scalar(0.227814, 0.279471)
  v8 = norm(m14, axis=0)
  v27 = minimum(v10, v2)
  v29 = v13 * v15
  v23 = uniform(-0.288833, -0.245739, n_features)
  s12 = mean(m16)
  s9 = s9 + s6
  s20 = 1 / s27
  s22 = abs(s24)
  s11 = s9 / s21
  s10 = correlation(v5, v8, 0.835554)
  m17 = m19 + m7
  m18 = 1 / m1
  s28 = arctan(s28)
  NoOp()
  m4 = heaviside(m7, 1.0)
  s28 = s28 - s3
  m24 = outer(v13, v12)
  m14 = m13 * m14
  v21 = norm(m18, axis=1)
  m15 = m15 / m19
  s15 = s25 * s5
  s18 = cos(s13)
  s13 = get_scalar(0.799082, 0.893172)
  s24 = log(s23)
  s14 = relation_demean(s7)
  s7 = cos(s19)
  m23 = m8 - m12
  m1 = m17 * m8
  s1 = TS_rank(s28)
  m7 = m0 + m4
  v18 = get_row(0.0211333)
  m10 = uniform(-0.166868, -0.441046, (n_features, n_features))
  s14 = sin(s10)
  s12 = relation_rank(s15)
  v15 = maximum(v17, v23)
  m7 = abs(m9)
  m21 = abs(m22)
  m17 = outer(v18, v25)
  s17 = relation_demean(s3)
  m13 = maximum(m13, m9)
  s6 = s13 - s0
  s19 = tan(s6)
  m3 = minimum(m7, m19)
  s14 = get_scalar(0.528645, 0.283519)
  s26 = s27 * s2
  s8 = arctan(s22)
  s20 = tan(s3)
  s17 = 1 / s7
  s2 = heaviside(s9, 1.0)
  s3 = s26 - s18
  s5 = sin(s18)
  m2 = heaviside(m8, 1.0)
  s21 = log(s28)
  s2 = mean(m5)
  m17 = bcast(v17, axis=0)
  s20 = cos(s12)
  s3 = tan(s3)
  v7 = maximum(v16, v21)
  s18 = covariance(v27, v6, 0.683366)
  v10 = 1 / v28
def Learn():
  s12 = mean(m14)
  s28 = get_scalar(0.822442, 0.943432)
  s24 = mean(v18)
  v12 = get_column(0.652101)
  m11 = maximum(m23, m16)
  v13 = 1 / v9
  s8 = s19 / s19
  s4 = maximum(s24, s24)
  v10 = abs(v1)
  s7 = mean(m17)
  m11 = matmul(m17, m16)
  s10 = s20 - s22
  s13 = s9 * s1
  v3 = dot(m12, v0)
  s28 = std(v12)
  s7 = minimum(s10, s20)
  s1 = exp(s12)
  s9 = cos(s20)
  s24 = heaviside(s28, 1.0)
  v5 = std(m17, axis=1)
  m5 = m20 + m11
  m11 = m21 / m15
  v4 = heaviside(v6, 1.0)
  s17 = s25 - s9
 
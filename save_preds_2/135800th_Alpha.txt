def Setup():
  s26 = uniform(-0.793352, 0.656665)
  m20 = gaussian(-0.91298, 0.311278, (n_features, n_features))
  s14 = uniform(-0.182077, -0.808257)
  v21[0.0150577] = -0.0345243
  s28 = uniform(0.198297, -0.685043)
  s3 = uniform(0.210368, 0.441658)
  m18 = uniform(0.105658, -0.165358, (n_features, n_features))
  v20[0.15575] = -0.0938079
  s19 = gaussian(0.0378107, 0.546623)
  m12[0.318467, 0.478274] = 0.9414
  v4[0.894415] = -0.0302807
  v4 = uniform(0.0645032, -0.442037, n_features)
  s3 = gaussian(0.665332, 0.154024)
  s9 = uniform(-0.118064, 0.333071)
  v16 = gaussian(0.878625, 0.719482, n_features)
  m10 = gaussian(-0.920381, 0.831298, (n_features, n_features))
  m18 = uniform(-0.6774, -0.658426, (n_features, n_features))
  s9 = gaussian(0.589552, 0.132374)
def Predict():
  v6 = s13 * v21
  s21 = exp(s21)
  s2 = 1 / s19
  s28 = get_scalar(0.197182, 0.93282)
  s17 = get_scalar(0.227814, 0.279471)
  v8 = norm(m14, axis=0)
  v27 = minimum(v10, v2)
  v29 = v13 * v15
  v29 = uniform(-0.288833, -0.245739, n_features)
  s9 = s9 + s6
  s20 = 1 / s27
  s22 = abs(s24)
  s11 = s1 / s21
  s10 = correlation(v5, v8, 0.835554)
  v6 = uniform(-0.523074, -0.421673, n_features)
  m17 = m19 + m7
  m18 = 1 / m1
  m12 = 1 / m22
  s28 = arctan(s28)
  v1 = norm(m15, axis=0)
  NoOp()
  m4 = heaviside(m7, 1.0)
  s28 = s28 - s3
  s12 = maximum(s13, s6)
  m24 = outer(v13, v12)
  m14 = m13 * m14
  v26 = norm(m18, axis=1)
  m15 = m15 / m19
  s15 = s25 * s5
  s18 = cos(s13)
  s13 = get_scalar(0.799082, 0.893172)
  s24 = log(s6)
  s14 = relation_demean(s7)
  s7 = cos(s19)
  m23 = m8 - m12
  m1 = m17 * m8
  s1 = TS_rank(s28)
  m7 = m0 + m4
  v18 = get_row(0.0211333)
  m19 = uniform(-0.166868, -0.441046, (n_features, n_features))
  s14 = sin(s10)
  m18 = bcast(v17, axis=0)
  s16 = mean(m0)
  s12 = relation_rank(s15)
  v15 = maximum(v17, v23)
  m7 = abs(m9)
  m21 = abs(m22)
  m17 = outer(v18, v25)
  s17 = relation_demean(s28)
  m13 = maximum(m13, m9)
  s6 = s16 - s0
  m3 = minimum(m7, m19)
  s26 = s27 * s2
  s8 = arctan(s22)
  s20 = tan(s3)
  s17 = 1 / s7
  s2 = heaviside(s9, 1.0)
  s3 = s26 - s18
  s5 = sin(s18)
  m2 = heaviside(m8, 1.0)
  m18 = m0 * m7
  s21 = log(s28)
  s2 = mean(m5)
  s20 = cos(s12)
  s3 = tan(s3)
  m7 = matmul(m24, m2)
  v7 = maximum(v16, v21)
  v10 = 1 / v28
def Learn():
  s12 = mean(m14)
  s24 = get_scalar(0.822442, 0.0164318)
  s24 = mean(v17)
  v8 = maximum(v21, v24)
  v12 = get_column(0.652101)
  s24 = minimum(s19, s6)
  m11 = maximum(m23, m16)
  s24 = heaviside(s9, 1.0)
  v13 = 1 / v18
  m17 = uniform(-0.27151, 1.01424, (n_features, n_features))
  m4 = 1 / m0
  s22 = std(m15)
  s4 = maximum(s24, s24)
  v16 = uniform(-0.82292, -0.77484, n_features)
  v10 = abs(v1)
  v9 = heaviside(v3, 1.0)
  s7 = mean(m17)
  v24 = v21 - v24
  m11 = matmul(m17, m16)
  v23 = bcast(s18)
  s10 = s20 - s22
  s19 = sin(s20)
  s13 = s9 * s1
  s18 = log(s22)
  s9 = maximum(s14, s25)
  s28 = std(v12)
  s17 = minimum(s5, s11)
  s7 = exp(s12)
  s9 = cos(s20)
  s24 = heaviside(s28, 1.0)
  v5 = std(m17, axis=1)
  m5 = m20 + m22
  m11 = m21 / m15
 
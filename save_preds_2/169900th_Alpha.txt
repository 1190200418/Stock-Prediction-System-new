def Setup():
  v13[0.0196231] = 0.812217
  s1 = gaussian(0.729082, 0.934841)
  m13 = uniform(0.288821, 0.856433, (n_features, n_features))
  s1 = -0.596785
  s18 = 0.778302
  v7 = uniform(0.741742, 0.791117, n_features)
  m3 = gaussian(0.351022, 0.294515, (n_features, n_features))
  v26[0.362275] = 0.957297
  m13[0.408354, 0.623087] = -0.506128
  v24[0.660721] = -0.975288
  s25 = uniform(0.400293, 0.248723)
  m17[0.489478, 0.35438] = 0.955436
  s28 = uniform(-0.838588, -0.083968)
  v28[0.834305] = 0.518039
  v18 = uniform(0.0622, 0.571045, n_features)
  m10 = uniform(-0.153748, -0.644595, (n_features, n_features))
  s7 = 0.586663
def Predict():
  m24 = outer(v23, v18)
  v13 = s13 * v22
  s21 = exp(s21)
  s7 = maximum(s7, s8)
  s27 = 1 / s28
  s28 = get_scalar(0.197182, 0.20938)
  m6 = 1 / m22
  v29 = get_row(0.378867)
  v8 = v12 * v29
  v27 = minimum(v0, v2)
  s19 = get_scalar(0.925094, 0.75167)
  s5 = std(v6)
  v28 = bcast(s13)
  v29 = uniform(-0.288833, -0.245739, n_features)
  s20 = minimum(s7, s20)
  s9 = s9 + s6
  v26 = abs(v9)
  v2 = mean(m4, axis=1)
  v14 = abs(v13)
  s20 = 1 / s0
  m6 = outer(v28, v27)
  s8 = abs(s9)
  s10 = correlation(v8, v8, 0.835554)
  v15 = uniform(-0.523074, -0.421673, n_features)
  m10 = m19 + m7
  m24 = 1 / m1
  s28 = arctan(s28)
  v1 = norm(m24, axis=0)
  NoOp()
  m4 = heaviside(m7, 1.0)
  s28 = s28 - s3
  m17 = m22 * m18
  s6 = TS_rank(s15)
  s10 = maximum(s13, s6)
  m17 = outer(v13, v12)
  m1 = m13 * m24
  v26 = norm(m10, axis=1)
  s15 = s25 * s5
  s18 = cos(s13)
  s13 = get_scalar(0.0743486, 0.893172)
  s8 = log(s27)
  s7 = cos(s5)
  s22 = s0 + s1
  m1 = m17 * m8
  m9 = minimum(m2, m18)
  s7 = tan(s27)
  s1 = TS_rank(s28)
  s12 = abs(s17)
  v18 = get_row(0.1668)
  v29 = v21 / v5
  s2 = exp(s9)
  m3 = bcast(v25, axis=1)
  v15 = maximum(v17, v23)
  m16 = abs(m9)
  m2 = abs(m22)
  m2 = transpose(m24)
  s25 = std(m6)
  m17 = outer(v18, v25)
  s17 = relation_demean(s28)
  m13 = maximum(m13, m9)
  s6 = s16 - s11
  m3 = minimum(m7, m19)
  v26 = abs(v12)
  v17 = norm(m4, axis=1)
  s3 = s0 - s18
  m2 = heaviside(m16, 1.0)
  s3 = tan(s3)
  m7 = matmul(m20, m2)
  v15 = 1 / v28
def Learn():
  m18 = m15 / m18
  v3 = minimum(v20, v10)
  s4 = get_scalar(0.307404, 0.0164318)
  v8 = maximum(v12, v15)
  m13 = maximum(m20, m14)
  m5 = m12 + m9
  v17 = std(m10, axis=1)
  s18 = heaviside(s1, 1.0)
  v9 = get_column(0.623571)
  v8 = get_column(0.732713)
  v9 = v12 * v15
  s24 = heaviside(s23, 1.0)
  m1 = maximum(m13, m17)
  s19 = arctan(s8)
  s28 = tan(s5)
  m20 = matmul(m3, m13)
  s4 = maximum(s24, s24)
  s28 = 1 / s6
  v24 = bcast(s18)
  s23 = s7 - s15
  s13 = s9 * s1
  s27 = maximum(s20, s24)
  s17 = minimum(s29, s11)
  s7 = exp(s24)
  m19 = bcast(v23, axis=0)
  s9 = cos(s2)
  v9 = maximum(v0, v2)
  s27 = heaviside(s17, 1.0)
  v4 = norm(m8, axis=1)
  s11 = mean(m10)
  v10 = v6 * v24
  m5 = heaviside(m23, 1.0)
  s22 = s16 - s2
  v26 = std(m17, axis=1)
  m2 = m20 + m22
  s5 = s25 / s24
  m22 = heaviside(m1, 1.0)
 
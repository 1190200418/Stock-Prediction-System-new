def Setup():
  s28 = uniform(-0.133961, 0.285774)
def Predict():
  s28 = relation_demean(s5)
  v16 = std(m3, axis=1)
  v1 = norm(m14, axis=0)
  NoOp()
  v26 = norm(m23, axis=0)
  v6 = s18 * v13
  s17 = TS_rank(s23)
  s2 = get_scalar(0.865968, 0.956169)
  v9 = v20 * v20
  m17 = heaviside(m8, 1.0)
  m13 = 1 / m23
  m3 = m21 / m14
  v12 = minimum(v18, v8)
  v24 = v16 * v2
  s12 = cos(s2)
  s15 = arcsin(s1)
  s8 = get_scalar(0.165442, 0.986299)
  m23 = m5 / m19
  s5 = minimum(s12, s26)
  s28 = maximum(s7, s19)
  s26 = s26 / s16
  s13 = tan(s29)
  s24 = log(s27)
  v25 = s13 * v3
  m17 = m21 / m22
  m21 = uniform(-0.676407, 0.93064, (n_features, n_features))
  s22 = relation_demean(s8)
  m10 = uniform(-0.780024, 0.975005, (n_features, n_features))
  m15 = matmul(m4, m21)
  s6 = arctan(s0)
  m10 = transpose(m1)
  s1 = norm(v11)
  s27 = relation_demean(s22)
  v3 = bcast(s15)
  s19 = s19 - s22
  s12 = TS_rank(s22)
  v27 = dot(m23, v7)
  s29 = tan(s11)
  m16 = abs(m23)
  s25 = exp(s17)
  s13 = norm(v15)
  s19 = previous_rank(s10)
  s27 = log(s2)
  v10 = TS_row_rank(s21)
  s1 = minimum(s28, s5)
  v17 = bcast(s20)
  s7 = s16 * s12
  s23 = s5 * s7
  m8 = outer(v29, v25)
  m15 = uniform(0.348233, 0.278103, (n_features, n_features))
  s8 = minimum(s1, s28)
  m14 = m24 - m17
  s10 = TS_rank(s27)
  v24 = abs(v19)
  m11 = 1 / m17
  s26 = exp(s28)
  s7 = maximum(s23, s14)
  s2 = 1 / s7
  m1 = 1 / m20
def Learn():
  m14 = m8 - m20
  v16 = norm(m9, axis=1)
  v14 = v22 * v16
  s14 = s23 + s10
  s18 = std(v6)
  m7 = bcast(v24, axis=0)
  s24 = std(v12)
  v28 = uniform(0.829377, 0.678388, n_features)
  m2 = s3 * m20
  m1 = 1 / m15
  s16 = s25 + s12
  v10 = v17 + v16
  m15 = m6 * m18
 
def Setup():
  v10 = uniform(-0.409326, -0.853772, n_features)
  m16 = uniform(0.886364, 0.374645, (n_features, n_features))
  v20 = uniform(-0.207352, -0.635241, n_features)
  v11 = uniform(0.875721, 0.987153, n_features)
  v24[0.539721] = -0.62449
  m6[0.921534, 0.280449] = 0.790844
  v8[0.934676] = -0.879771
  s1 = -0.101621
def Predict():
  s14 = maximum(s13, s12)
  s18 = norm(v24)
  s5 = log(s8)
  m6 = abs(m3)
  v12 = minimum(v24, v6)
  s27 = s7 * s21
  v22 = abs(v20)
  s9 = minimum(s17, s6)
  m8 = s29 * m22
  m3 = heaviside(m13, 1.0)
  s27 = std(m12)
  s9 = relation_demean(s19)
  s21 = std(m22)
  s4 = cos(s16)
  s19 = std(m0)
  s29 = TS_rank(s8)
  m10 = 1 / m24
  s12 = arctan(s17)
  s1 = arcsin(s27)
  s13 = sin(s17)
  s19 = correlation(v0, v22, 0.365692)
  m3 = transpose(m24)
  m3 = transpose(m4)
  s20 = maximum(s20, s17)
  s11 = arcsin(s28)
  s4 = heaviside(s15, 1.0)
  v6 = minimum(v14, v8)
  m13 = minimum(m15, m12)
  m8 = abs(m13)
  s10 = dot(v17, v13)
  m6 = heaviside(m16, 1.0)
  s8 = 1 / s29
  s1 = minimum(s12, s8)
  s1 = arctan(s1)
  v9 = abs(v27)
  s29 = dot(v15, v2)
  m15 = m0 / m22
  v5 = norm(m16, axis=1)
  v28 = uniform(0.290917, -0.770087, n_features)
  s17 = arctan(s19)
  s20 = relation_demean(s23)
  m18 = m20 * m3
  m10 = matmul(m18, m11)
  s17 = s29 * s22
  v14 = v7 - v2
  s17 = cos(s26)
  s17 = sin(s17)
  m5 = matmul(m0, m24)
  NoOp()
  m23 = heaviside(m11, 1.0)
  s17 = 1 / s17
  s18 = std(v6)
  s7 = arccos(s26)
  m7 = m23 + m0
  s29 = covariance(v13, v21, 0.69302)
  s26 = norm(v20)
  v25 = v5 * v9
  s21 = norm(v24)
  s19 = cos(s29)
  s10 = mean(m8)
  s3 = heaviside(s21, 1.0)
  s8 = arcsin(s26)
def Learn():
  s26 = get_scalar(0.563724, 0.518887)
  v22 = v29 / v27
  m4 = bcast(v20, axis=0)
  m24 = heaviside(m2, 1.0)
  s6 = abs(s20)
  v28 = v7 * v26
  v8 = v22 * v23
  v20 = get_row(0.569573)
  s12 = std(v10)
  m1 = matmul(m23, m11)
  s29 = mean(m23)
  m12 = m20 * m0
  m1 = uniform(-0.698113, -0.95532, (n_features, n_features))
  v16 = bcast(s17)
  v14 = mean(m24, axis=1)
  s14 = s29 / s17
  s29 = s8 / s14
  v18 = heaviside(v18, 1.0)
  v19 = uniform(0.530096, -0.828297, n_features)
  s19 = s0 - s27
  m6 = minimum(m0, m1)
  s15 = minimum(s26, s8)
  v14 = uniform(-0.772633, -0.245628, n_features)
  s22 = arcsin(s0)
  v11 = norm(m16, axis=0)
  m20 = transpose(m8)
  m1 = heaviside(m23, 1.0)
  m3 = maximum(m19, m15)
  s12 = std(v16)
  s8 = exp(s8)
  m4 = heaviside(m23, 1.0)
  m15 = heaviside(m11, 1.0)
  s20 = mean(v28)
  v12 = get_column(0.145701)
  m6 = abs(m20)
  v3 = v26 + v4
  s12 = arccos(s20)
  m17 = m12 / m23
  v24 = v6 - v26
  s27 = mean(m10)
  v3 = get_column(0.950781)
  s21 = norm(v0)
  m7 = s2 * m4
 
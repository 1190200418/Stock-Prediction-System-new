def Setup():
  m15[0.700453, 0.0425076] = 0.75623
  v3[0.627246] = 0.821348
  v22 = uniform(0.206396, -0.766819, n_features)
  m3[0.0923244, 0.213883] = 0.76139
  v14 = uniform(0.335715, -0.213713, n_features)
  s6 = -0.287706
  s11 = gaussian(0.186198, 0.407779)
  m17 = gaussian(-0.677264, 0.826562, (n_features, n_features))
  m2[0.0697184, 0.435473] = 0.998397
  m2 = gaussian(0.353596, 0.0485329, (n_features, n_features))
  m12 = uniform(-0.600677, 0.218863, (n_features, n_features))
  v16[0.291727] = 0.453391
  m8 = gaussian(-0.331211, 0.491018, (n_features, n_features))
  s25 = uniform(-0.899344, 0.0996604)
  v11 = uniform(0.376713, -0.42956, n_features)
  m5 = uniform(-0.620944, 0.567288, (n_features, n_features))
  s9 = gaussian(0.053943, 0.215053)
  v19[0.211805] = -0.292553
def Predict():
  s21 = exp(s21)
  s2 = 1 / s19
  s28 = get_scalar(0.197182, 0.93282)
  v19 = get_column(0.367994)
  s17 = get_scalar(0.227814, 0.279471)
  v8 = norm(m14, axis=0)
  v27 = minimum(v10, v2)
  v29 = v13 * v15
  v23 = uniform(-0.288833, -0.245739, n_features)
  s12 = mean(m16)
  s9 = s9 + s6
  s20 = 1 / s27
  s22 = abs(s24)
  s11 = s1 / s21
  s10 = correlation(v5, v8, 0.835554)
  v6 = uniform(-0.523074, -0.421673, n_features)
  m17 = m19 + m7
  m18 = 1 / m1
  s28 = arctan(s28)
  v1 = norm(m15, axis=0)
  NoOp()
  m4 = heaviside(m7, 1.0)
  s28 = s28 - s3
  s12 = maximum(s13, s6)
  m24 = outer(v13, v12)
  m14 = m13 * m14
  v21 = norm(m18, axis=1)
  m15 = m15 / m19
  s15 = s25 * s5
  s18 = cos(s13)
  s13 = get_scalar(0.799082, 0.893172)
  s24 = log(s6)
  s14 = relation_demean(s7)
  s7 = cos(s19)
  m23 = m8 - m12
  m1 = m17 * m8
  s1 = TS_rank(s28)
  m7 = m0 + m4
  v18 = get_row(0.0211333)
  m19 = uniform(-0.166868, -0.441046, (n_features, n_features))
  s14 = sin(s10)
  s12 = relation_rank(s15)
  v15 = maximum(v17, v23)
  m7 = abs(m9)
  m21 = abs(m22)
  m17 = outer(v18, v25)
  s17 = relation_demean(s3)
  m13 = maximum(m13, m9)
  s6 = s13 - s0
  s19 = tan(s6)
  m3 = minimum(m7, m19)
  s26 = s27 * s2
  s8 = arctan(s22)
  s20 = tan(s3)
  s17 = 1 / s7
  s2 = heaviside(s9, 1.0)
  s3 = s26 - s18
  s5 = sin(s18)
  m2 = heaviside(m8, 1.0)
  m18 = m0 * m7
  s21 = log(s28)
  s2 = mean(m5)
  s20 = cos(s12)
  s3 = tan(s3)
  m7 = matmul(m24, m2)
  v7 = maximum(v16, v21)
  v10 = 1 / v28
def Learn():
  s12 = mean(m14)
  s28 = get_scalar(0.822442, 0.943432)
  s24 = mean(v18)
  v8 = maximum(v21, v24)
  v12 = get_column(0.652101)
  s24 = minimum(s19, s6)
  m11 = maximum(m23, m16)
  s24 = heaviside(s9, 1.0)
  v13 = 1 / v9
  s16 = s17 / s19
  m17 = uniform(-0.27151, 1.01424, (n_features, n_features))
  s4 = maximum(s24, s24)
  v16 = uniform(-0.82292, -0.77484, n_features)
  v10 = abs(v1)
  v9 = heaviside(v3, 1.0)
  s7 = mean(m17)
  m11 = matmul(m17, m16)
  v23 = bcast(s18)
  m8 = 1 / m7
  s10 = s20 - s22
  s13 = s9 * s1
  s28 = std(v12)
  s17 = minimum(s5, s11)
  s7 = exp(s12)
  s9 = cos(s20)
  s24 = heaviside(s28, 1.0)
  v5 = std(m17, axis=1)
  m5 = m20 + m11
  s28 = s10 - s21
  v20 = v17 + v28
  m11 = m21 / m15
  v4 = heaviside(v6, 1.0)
 